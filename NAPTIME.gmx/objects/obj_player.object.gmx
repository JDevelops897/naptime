<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_costume_clown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = .05;
spd = 3;

for (i = 0; i &lt; 5; i++) {
    item[i] = Items.None;
    itemCount[i] = 0;
}

outfit = Outfits.Clown;
for (i = 0; i &lt; Outfits.Last; i++) {
    outfitSuspicion[i] = 0;
}

scariness = 0;
suspicion = 0;

ropeConnection = noone;

interactionDistance = 10;

moving = false;
facing = 0;

prevFrame = image_index;

kills = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//player frame update

//set blank movement vector
var xMove = 0;
var yMove = 0;

//get movement vector from imputs
xMove = keyboard_check(ord("D")) - keyboard_check(ord("A"));
yMove = keyboard_check(ord("S")) - keyboard_check(ord("W"));

if xMove &gt; 0 facing = true else if xMove &lt; 0 facing = false;

//get direction the player is attempting to move
var dir = point_direction(x, y, x+xMove, y+yMove);

//if player movement vector is not the current position
if (point_distance(x, y, x+xMove, y+yMove) &gt; 0 ) {
    //move player in direction with speed
    if (place_free (x + lengthdir_x (spd, dir), y))
        x += lengthdir_x(spd, dir);
    if (place_free (x, y + lengthdir_y (spd, dir)))
        y += lengthdir_y(spd, dir);
    
}

if (xMove != 0 or yMove != 0) moving = true else moving = false;

//interact
if (keyboard_check_pressed(ord("J"))) {
    if (ropeConnection != noone) {
        ropeConnection = noone; 
        exit;
    }
    //soemthing interactable exists
    if (instance_exists(obj_interactable)) {
        if (instance_exists(obj_kid)) {
            if (instance_nearest(x, y, obj_interactable) == instance_nearest(x, y, obj_kid)) {
                if (distance_to_object(instance_nearest(x, y, obj_kid)) &lt; interactionDistance) {
                    n = instance_nearest(x, y, obj_kid)
                    with instance_create(n.x, n.y, obj_sac) {
                        sleeping = other.n.sleeping;
                        other.ropeConnection = self;
                        kid = other.n;
                        audio_play_sound(snd_rope, 0, 0);
                    }
                    instance_deactivate_object(n);
                    //with (n) instance_destroy();
                }
            } else {
                if (distance_to_object(instance_nearest(x, y, obj_interactable)) &lt; interactionDistance) {
                    n = instance_nearest(x, y, obj_interactable)
                    if (n == ropeConnection) ropeConnection = noone else { ropeConnection = n; audio_play_sound(snd_footstep, 0, 0);};
                }
            }
        } else {
            if (distance_to_object(instance_nearest(x, y, obj_interactable)) &lt; interactionDistance) {
                n = instance_nearest(x, y, obj_interactable)
                if (n == ropeConnection) ropeConnection = noone else {ropeConnection = n; audio_play_sound(snd_footstep, 0, 0);};
            }
        }
    }
}

if (keyboard_check_pressed(ord("K"))) {
    instance_create(x, y, obj_candy);
}

if (keyboard_check_pressed(ord("L"))) {
    outfit++;
    if outfit &gt; 2 outfit = 0;
    instance_create(x,y,obj_poof);
}

if (moving) {
    if prevFrame != floor(image_index) {
        audio_sound_pitch(snd_footstep, random_range(0.9, 1.1));
        audio_play_sound(snd_footstep, 0, 0);
        prevFrame = floor(image_index);
    }
}

if (kills &gt;= 5 &amp;&amp; !instance_exists(obj_roomTransition))
{
    with (instance_create(0, 0, obj_fadeToRoom)) {
        targetRoom = room_win;
        fadeSeconds = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ropeConnection != noone) {
    while (distance_to_object(ropeConnection) &gt; 15) {
        ropeConnection.x += lengthdir_x(.1, point_direction(ropeConnection.x, ropeConnection.y, x, y));
        ropeConnection.y += lengthdir_y(.1, point_direction(ropeConnection.x, ropeConnection.y, x, y));
    }
    var numRopes = ceil(distance_to_object(ropeConnection)/8);
    if (numRopes &gt; 1) numRopes += 4 else numRopes += 2;
    var dir = point_direction(x, y, ropeConnection.x, ropeConnection.y);
    for (i = 0; i &lt;= numRopes; i++) {
        draw_sprite_ext(spr_rope, 0, x+lengthdir_x(i*8, dir), y + lengthdir_y(i*8, dir), 1, 1, dir, c_white, 1);
    }
}

var xscale = -1;
if (facing == 0) xscale = 1;

var walksprite;
switch(outfit) {
    case 0:
        walksprite = spr_costume_clown_walk;
        break;
    case 1:
        walksprite = spr_costume_ghostWalk;
        break;  
    case 2:
        walksprite = spr_costume_serial_walk;
        break;
}
var idlesprite;
switch(outfit) {
    case 0:
        idlesprite = spr_costume_clown;
        break;
    case 1:
        idlesprite = spr_costume_ghost;
        break;  
    case 2:
        idlesprite = spr_costume_serial;
        break;
}

if moving 
    draw_sprite_ext(walksprite, image_index, x, y, xscale, 1, 0, c_white, 1);
else 
    draw_sprite_ext(idlesprite, image_index, x, y, xscale, 1, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
